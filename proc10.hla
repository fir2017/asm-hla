/*
 * Challenge 10 - Convert High to Low-level
 *
 *
 * written by           Low Saetern
 * created on           27 October 2014
 * last modified        29 October 2014
 *
 * Converted high-level if..elseif...else to low-level statements.
 * These low-level assembly includes cmp, jl, jne, and labels
 * Last part, a single character is converted to upper-case
 *
 */
program ProgrammingChallengeFifteen;

#include ("stdlib.hhf")

/* forward declarations */
procedure getInt8 (prompt: string; min: int8; max: int8); @returns("al"); @forward;

/* procedure definitions */
procedure getInt8 (prompt: string; min: int8; max: int8);
begin getInt8;

	push(edx);
	push(ecx);
	push(ebx);
	forever
		try
			stdout.put(nl, prompt, " (", min, " to ", max, "): ");
			stdin.flushInput();
			stdin.geti8();
			unprotected
				cmp((type int8 al), min);
				jl INT8_BAD;
				cmp((type int8 al), max);
				jg INT8_BAD;
				break;
				INT8_BAD:
					stdout.put(nl, "Value not in required range.");
		anyexception
			stdout.put(nl, "Invalid input.");
		endtry;
	endfor;
	pop(ebx);
	pop(ecx);
	pop(edx);

end getInt8;

/* program variables and main */

static
	input: int8;
	isPrime: boolean;
	
begin ProgrammingChallengeFifteen;

	forever
		
		console.cls();
		
		mov(getInt8("Please enter an int8", -127, 127), input);
		
		stdout.put(nl, "What do you want to do with your input value?", nl);
		stdout.put("1. Test to see if it is negative", nl);
		stdout.put("2. Test to see if it is even", nl);
		stdout.put("3. Reverse its sign", nl);
		stdout.put("4. Test to see if it is prime", nl);
		stdout.put("your choice: ");
		getInt8("your choice", 1, 4);
		
		console.cls();
	        cmp(al, 1);
                jne testEven;
		//if (al == 1) then
                        cmp(input, 0);
                        jnl greaterThan;
			//if (input < 0) then
				stdout.put(input, " is a negative value.", nl);
                                jmp endGreaterThan;
			//else
                        greaterThan:
				stdout.put(input, " is greater than or equal to zero.", nl);
                        endGreaterThan:
			//endif;
                        jmp tryAgain;
                testEven:
                cmp(al, 2);
                jne reverseSign;
		//elseif (al == 2) then
			
			mov(0, ah);
			mov(input, al);
			idiv(2, ax);
                        cmp(ah, 0);
                        jne oddNumber;
			//if (ah == 0) then
				stdout.put(input, " is an even number.", nl);
                                jmp endOddEven;
			//else
                        oddNumber:
				stdout.put(input, " is an odd number.", nl);
                        endOddEven:
			//endif;
                        jmp tryAgain;
                reverseSign:
                cmp(al, 3);
                jne convertToPositive;
		//elseif (al == 3) then
			mov(input, al);
			not(al);
			add(1, al);
			stdout.put(input, " sign reversed is ", (type int8 al), nl);
                        jmp tryAgain;
		//else
                        convertToPositive:
                        cmp(input, 0);
                        jne checkPrime;
			//if (input < 0) then
				stdout.put("Reversing the sign.", nl, nl);
				mov(input, al);
				not(al);
				add(1, al);
				mov(al, input);
                                jmp tryAgain;
			//endif;
                        checkPrime:
			mov(true, isPrime);
                        cmp(input, 2);
                        jnl doubleCheckPrime;
			//if (input < 2) then
				mov(false, isPrime);
		//	else
                        doubleCheckPrime:
				for (mov(2, cl); cl<input; inc(cl)) do
					mov(0, ah);
					mov(input, al);
					div(cl, ax);
                                        cmp(ah, 0);
                                        jne tripleCheckPrime;
					//if (ah == 0) then
						mov(false, isPrime);
						break;
					//endif;
                                        tripleCheckPrime:
				endfor;
			//endif;
			
                        cmp(isPrime, 1);
                        jne notPrime;
			//if (isPrime == true) then
				stdout.put(input, " is a prime number.", nl);
                                jmp endPrime;
			//else
                        notPrime:
				stdout.put(input, " is not a prime number.", nl);
                        endPrime:
			//endif;
		//endif;
		
                tryAgain:
		stdout.put(nl, nl, "Go again (y/n)? ");
		stdin.flushInput();
		
		stdin.getc(); // NEED CODE TO FORCE UPPER-CASE
		
                and($5f, al); // FORCES UPPERCASE!
		cmp(al, 'N');
		jne GO_AGAIN;
			break;
		GO_AGAIN:
			console.cls();
		
	endfor;
	

end ProgrammingChallengeFifteen;
