program GetMinimum;
#include("stdlib.hhf");

procedure calc_min(baseAddr: dword; arraySize: uns32; dataType: uns32);
begin calc_min;
    push(eax);
    
    mov(baseAddr, eax);
    mov(1, ecx);
    FOR_LOOP_CALC_MIN:
    cmp(ecx, arraySize);
    jnl EXIT_FOR_LOOP_CALC_MIN;

        cmp(ecx, 2);
        jnge SETUP_MIN_FUNCTION;

            mov([eax+ecx], bl);

            stdout.put("Test: ", (type int8 bl), " < ", (type int8 dl), nl);

            cmp(bl, dl);
            jnl END_MIN_TEST;

                mov([eax+ecx], dl);
                stdout.put("[eax+0] = ", (type int8 dl), nl);

            jmp END_MIN_TEST;

        SETUP_MIN_FUNCTION:

            mov([eax+ecx], dl);

        END_MIN_TEST:

    inc(ecx);
    jmp FOR_LOOP_CALC_MIN;
    EXIT_FOR_LOOP_CALC_MIN:

    mov(dl, [eax]);
    stdout.put("Smallest value: ", (type int8 [eax]), nl);

    pop(eax); 
end calc_min;

begin GetMinimum;
    
    rand.randomize();

    mem.zalloc(@size(int8)*10);

    for(mov(1, ecx); ecx < 10; inc(ecx)) do
        push(eax); // save array ptr addr
        rand.range(-128,127);
        mov(eax, ebx);
        pop(eax);
        mov(ebx, [eax + ecx]);
    endfor;

    calc_min(eax, 10, 1); 

end GetMinimum;
