/*
 * Challenge 11 - Memory reference, dereference, pointers
 *
 *
 * author           Low Saetern, Emanuel T.
 * created on       30 October 2014
 * last modified    04 November 2014
 *
 *
 * Challenge 11 prompts for multiple inputs (int 8, 16, 32) and thne
 * processes it accordingly. After, the program will dispay the memory
 * address and value for the inputs.
 *
 */

program ALPHA;
#include("stdlib.hhf");

static
    number8         :int8;
    number16        :int16;
    number32        :int32;

// DECLARE procedures
procedure getInt8(prompt: string; min: int8; max: int8); @returns("al"); @forward;
procedure getInt16(prompt: string; min: int16; max: int16); @returns("ax"); @forward;
procedure getInt32(prompt: string; min: int32; max: int32); @returns("eax"); @forward;
procedure displayValue(addr: dword; choice: uns8); @forward;

// INT8
procedure getInt8(prompt:string; min: int8; max: int8);
begin getInt8;
  REP_UNTI8:
    stdout.put(prompt);
    stdin.flushInput();
    try
      stdin.geti8();
      jmp EX_INT8;
    anyexception
      stdout.put("The value is invalid.",nl);
      stdout.put("Please ENTER a valid input between ");
      stdout.put(min, " and ", max, nl, nl);
    endtry;
    jmp REP_UNTI8;
  EX_INT8:
end getInt8;

// INT16
procedure getInt16(prompt:string; min: int16; max: int16);
begin getInt16;
  REP_UNTI16:
    stdout.put(prompt);
    stdin.flushInput();
    try
      stdin.geti16();
      jmp EX_INT16;
    anyexception
      stdout.put("The value is invalid.",nl);
      stdout.put("Please ENTER a valid input between ");
      stdout.put(min, " and ", max, nl, nl);
    endtry;
    jmp REP_UNTI16;
  EX_INT16:
end getInt16;


// INT32
procedure getInt32(prompt:string; min: int32; max: int32);
begin getInt32;
  REP_UNTI32:
    stdout.put(prompt);
    stdin.flushInput();
    try
      stdin.geti32();
      jmp EX_INT32;
    anyexception
      stdout.put("The value is invalid.",nl);
      stdout.put("Please ENTER a valid input between ");
      stdout.put(min, " and ", max, nl, nl);
    endtry;
    jmp REP_UNTI32;
  EX_INT32:
end getInt32;

// DISPLAY VALUE
procedure displayValue(addr: dword; choice: uns8);
begin displayValue;
    cmp(choice, 2);
    // GOTO INT16 CODE
    je INT16_ADDR;

    cmp(choice, 3);
    // GOTO INT32 CODE
    je INT32_ADDR;

    mov(addr, eax);
    mov([eax], al);
    stdout.put("address: $", addr, " = ");
    stdout.put((type int8 al), " (int8)", nl);
    jmp END_DISPLAY;
    
    INT16_ADDR:
    mov(addr, eax);
    mov([eax], ax);
    stdout.put("address: $", addr, " = ");
    stdout.put((type int16 ax), " (int16)", nl);
    jmp END_DISPLAY;

    INT32_ADDR:
    mov(addr, eax);
    mov([eax], eax);
    stdout.put("address: $", addr, " = ");
    stdout.put((type int32 eax), " (int32)", nl);

    END_DISPLAY:
end displayValue;

begin ALPHA;
    REP_UNT:
        getInt8("Enter value: ", -128, 127);
        mov(al, number8);
        getInt16("Enter value: ", -32768, 32767);
        mov(ax, number16);
        getInt32("Enter value: ", -2147483648, 2147483647);
        mov(eax, number32);
        
        displayValue(&number8, 1);
        displayValue(&number16, 2);
        displayValue(&number32, 3);

        REP_GETC:
            stdout.put("Do you want to start again? (y/n): ");
            stdin.flushInput();
            stdin.getc();
            and($5f, al);
        
        cmp(al, 'Y');
        je REP_UNT;
        cmp(al, 'N');
        jne REP_GETC;
end ALPHA;
